{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 50,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 461
        },
        "id": "SLMbkoHydQqX",
        "outputId": "ccbbfbc5-c494-4580-9dce-92db3d1de1c3"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(97230, 108)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          start_time  lobby_type  r1_hero  r1_level  r1_xp  r1_gold  r1_lh  \\\n",
              "match_id                                                                     \n",
              "0         1430198770           7       11         5   2098     1489     20   \n",
              "1         1430220345           0       42         4   1188     1033      9   \n",
              "2         1430227081           7       33         4   1319     1270     22   \n",
              "3         1430263531           1       29         4   1779     1056     14   \n",
              "4         1430282290           7       13         4   1431     1090      8   \n",
              "5         1430284186           1       11         5   1961     1461     19   \n",
              "8         1430293701           1        8         3    967     1136      7   \n",
              "9         1430299335           7       35         5   2117     1252     16   \n",
              "11        1430308974           1       17         5   1527      906     10   \n",
              "12        1430316105           7       15         5   1651     1060     14   \n",
              "\n",
              "          r1_kills  r1_deaths  r1_items  ...  dire_boots_count  \\\n",
              "match_id                                 ...                     \n",
              "0                0          0         7  ...                 4   \n",
              "1                0          1        12  ...                 4   \n",
              "2                0          0        12  ...                 4   \n",
              "3                0          0         5  ...                 4   \n",
              "4                1          0         8  ...                 3   \n",
              "5                0          1         6  ...                 4   \n",
              "8                1          0         8  ...                 6   \n",
              "9                0          0         6  ...                 3   \n",
              "11               0          1         7  ...                 3   \n",
              "12               0          1        10  ...                 3   \n",
              "\n",
              "          dire_ward_observer_count  dire_ward_sentry_count  \\\n",
              "match_id                                                     \n",
              "0                                2                       2   \n",
              "1                                3                       1   \n",
              "2                                3                       1   \n",
              "3                                2                       0   \n",
              "4                                3                       0   \n",
              "5                                4                       0   \n",
              "8                                3                       0   \n",
              "9                                4                       0   \n",
              "11                               4                       0   \n",
              "12                               2                       0   \n",
              "\n",
              "          dire_first_ward_time  duration  radiant_win  tower_status_radiant  \\\n",
              "match_id                                                                      \n",
              "0                        -52.0      2874            1                  1796   \n",
              "1                         -5.0      2463            1                  1974   \n",
              "2                         13.0      2130            0                     0   \n",
              "3                         27.0      1459            0                  1920   \n",
              "4                        -16.0      2449            0                     4   \n",
              "5                        -43.0      1453            0                   512   \n",
              "8                         10.0      1968            0                  1536   \n",
              "9                        -15.0      4079            1                  1540   \n",
              "11                        26.0      3071            0                     0   \n",
              "12                        16.0      2384            0                     0   \n",
              "\n",
              "          tower_status_dire  barracks_status_radiant  barracks_status_dire  \n",
              "match_id                                                                    \n",
              "0                         0                       51                     0  \n",
              "1                         0                       63                     1  \n",
              "2                      1830                        0                    63  \n",
              "3                      2047                       50                    63  \n",
              "4                      1974                        3                    63  \n",
              "5                      2038                        0                    63  \n",
              "8                      1983                       12                    63  \n",
              "9                         0                       63                     0  \n",
              "11                     1572                        0                    63  \n",
              "12                     2038                        0                    63  \n",
              "\n",
              "[10 rows x 108 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-bd0e5af6-6b9b-46e7-bc3f-81ce719101ec\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>start_time</th>\n",
              "      <th>lobby_type</th>\n",
              "      <th>r1_hero</th>\n",
              "      <th>r1_level</th>\n",
              "      <th>r1_xp</th>\n",
              "      <th>r1_gold</th>\n",
              "      <th>r1_lh</th>\n",
              "      <th>r1_kills</th>\n",
              "      <th>r1_deaths</th>\n",
              "      <th>r1_items</th>\n",
              "      <th>...</th>\n",
              "      <th>dire_boots_count</th>\n",
              "      <th>dire_ward_observer_count</th>\n",
              "      <th>dire_ward_sentry_count</th>\n",
              "      <th>dire_first_ward_time</th>\n",
              "      <th>duration</th>\n",
              "      <th>radiant_win</th>\n",
              "      <th>tower_status_radiant</th>\n",
              "      <th>tower_status_dire</th>\n",
              "      <th>barracks_status_radiant</th>\n",
              "      <th>barracks_status_dire</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>match_id</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1430198770</td>\n",
              "      <td>7</td>\n",
              "      <td>11</td>\n",
              "      <td>5</td>\n",
              "      <td>2098</td>\n",
              "      <td>1489</td>\n",
              "      <td>20</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>...</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>-52.0</td>\n",
              "      <td>2874</td>\n",
              "      <td>1</td>\n",
              "      <td>1796</td>\n",
              "      <td>0</td>\n",
              "      <td>51</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1430220345</td>\n",
              "      <td>0</td>\n",
              "      <td>42</td>\n",
              "      <td>4</td>\n",
              "      <td>1188</td>\n",
              "      <td>1033</td>\n",
              "      <td>9</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>12</td>\n",
              "      <td>...</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>-5.0</td>\n",
              "      <td>2463</td>\n",
              "      <td>1</td>\n",
              "      <td>1974</td>\n",
              "      <td>0</td>\n",
              "      <td>63</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1430227081</td>\n",
              "      <td>7</td>\n",
              "      <td>33</td>\n",
              "      <td>4</td>\n",
              "      <td>1319</td>\n",
              "      <td>1270</td>\n",
              "      <td>22</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>12</td>\n",
              "      <td>...</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>13.0</td>\n",
              "      <td>2130</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1830</td>\n",
              "      <td>0</td>\n",
              "      <td>63</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1430263531</td>\n",
              "      <td>1</td>\n",
              "      <td>29</td>\n",
              "      <td>4</td>\n",
              "      <td>1779</td>\n",
              "      <td>1056</td>\n",
              "      <td>14</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>...</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>27.0</td>\n",
              "      <td>1459</td>\n",
              "      <td>0</td>\n",
              "      <td>1920</td>\n",
              "      <td>2047</td>\n",
              "      <td>50</td>\n",
              "      <td>63</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1430282290</td>\n",
              "      <td>7</td>\n",
              "      <td>13</td>\n",
              "      <td>4</td>\n",
              "      <td>1431</td>\n",
              "      <td>1090</td>\n",
              "      <td>8</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>8</td>\n",
              "      <td>...</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>-16.0</td>\n",
              "      <td>2449</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>1974</td>\n",
              "      <td>3</td>\n",
              "      <td>63</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>1430284186</td>\n",
              "      <td>1</td>\n",
              "      <td>11</td>\n",
              "      <td>5</td>\n",
              "      <td>1961</td>\n",
              "      <td>1461</td>\n",
              "      <td>19</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>...</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>-43.0</td>\n",
              "      <td>1453</td>\n",
              "      <td>0</td>\n",
              "      <td>512</td>\n",
              "      <td>2038</td>\n",
              "      <td>0</td>\n",
              "      <td>63</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>1430293701</td>\n",
              "      <td>1</td>\n",
              "      <td>8</td>\n",
              "      <td>3</td>\n",
              "      <td>967</td>\n",
              "      <td>1136</td>\n",
              "      <td>7</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>8</td>\n",
              "      <td>...</td>\n",
              "      <td>6</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>1968</td>\n",
              "      <td>0</td>\n",
              "      <td>1536</td>\n",
              "      <td>1983</td>\n",
              "      <td>12</td>\n",
              "      <td>63</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>1430299335</td>\n",
              "      <td>7</td>\n",
              "      <td>35</td>\n",
              "      <td>5</td>\n",
              "      <td>2117</td>\n",
              "      <td>1252</td>\n",
              "      <td>16</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>...</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>-15.0</td>\n",
              "      <td>4079</td>\n",
              "      <td>1</td>\n",
              "      <td>1540</td>\n",
              "      <td>0</td>\n",
              "      <td>63</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>1430308974</td>\n",
              "      <td>1</td>\n",
              "      <td>17</td>\n",
              "      <td>5</td>\n",
              "      <td>1527</td>\n",
              "      <td>906</td>\n",
              "      <td>10</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>7</td>\n",
              "      <td>...</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>26.0</td>\n",
              "      <td>3071</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1572</td>\n",
              "      <td>0</td>\n",
              "      <td>63</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>1430316105</td>\n",
              "      <td>7</td>\n",
              "      <td>15</td>\n",
              "      <td>5</td>\n",
              "      <td>1651</td>\n",
              "      <td>1060</td>\n",
              "      <td>14</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>10</td>\n",
              "      <td>...</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>16.0</td>\n",
              "      <td>2384</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2038</td>\n",
              "      <td>0</td>\n",
              "      <td>63</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>10 rows × 108 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bd0e5af6-6b9b-46e7-bc3f-81ce719101ec')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-bd0e5af6-6b9b-46e7-bc3f-81ce719101ec button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-bd0e5af6-6b9b-46e7-bc3f-81ce719101ec');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-50f0c833-2f12-4e12-ae5e-232ebb11025f\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-50f0c833-2f12-4e12-ae5e-232ebb11025f')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-50f0c833-2f12-4e12-ae5e-232ebb11025f button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 50
        }
      ],
      "source": [
        "#Подход 1: градиентный бустинг «в лоб»\n",
        "\n",
        "import pandas as pd\n",
        "\n",
        "features = pd.read_csv('/content/features.csv', index_col='match_id')\n",
        "print(features.shape)\n",
        "features.head(10)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "features_train = features.iloc[:,:102]\n",
        "print(features_train.shape)\n",
        "features_train.head(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 461
        },
        "id": "P9bXy7eweSr-",
        "outputId": "c3100b66-f3ac-4cdc-a02c-dc0646222080"
      },
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(97230, 102)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          start_time  lobby_type  r1_hero  r1_level  r1_xp  r1_gold  r1_lh  \\\n",
              "match_id                                                                     \n",
              "0         1430198770           7       11         5   2098     1489     20   \n",
              "1         1430220345           0       42         4   1188     1033      9   \n",
              "2         1430227081           7       33         4   1319     1270     22   \n",
              "3         1430263531           1       29         4   1779     1056     14   \n",
              "4         1430282290           7       13         4   1431     1090      8   \n",
              "5         1430284186           1       11         5   1961     1461     19   \n",
              "8         1430293701           1        8         3    967     1136      7   \n",
              "9         1430299335           7       35         5   2117     1252     16   \n",
              "11        1430308974           1       17         5   1527      906     10   \n",
              "12        1430316105           7       15         5   1651     1060     14   \n",
              "\n",
              "          r1_kills  r1_deaths  r1_items  ...  radiant_ward_sentry_count  \\\n",
              "match_id                                 ...                              \n",
              "0                0          0         7  ...                          0   \n",
              "1                0          1        12  ...                          0   \n",
              "2                0          0        12  ...                          1   \n",
              "3                0          0         5  ...                          0   \n",
              "4                1          0         8  ...                          0   \n",
              "5                0          1         6  ...                          1   \n",
              "8                1          0         8  ...                          2   \n",
              "9                0          0         6  ...                          1   \n",
              "11               0          1         7  ...                          1   \n",
              "12               0          1        10  ...                          0   \n",
              "\n",
              "          radiant_first_ward_time  dire_bottle_time  dire_courier_time  \\\n",
              "match_id                                                                 \n",
              "0                            35.0             103.0              -84.0   \n",
              "1                           -20.0             149.0              -84.0   \n",
              "2                           -39.0              45.0              -77.0   \n",
              "3                           -30.0             124.0              -80.0   \n",
              "4                            46.0             182.0              -80.0   \n",
              "5                           -27.0               2.0              -86.0   \n",
              "8                           -35.0               6.0              -86.0   \n",
              "9                            26.0             119.0              -61.0   \n",
              "11                            9.0               NaN              -84.0   \n",
              "12                          -24.0             186.0              -83.0   \n",
              "\n",
              "          dire_flying_courier_time  dire_tpscroll_count  dire_boots_count  \\\n",
              "match_id                                                                    \n",
              "0                            221.0                    3                 4   \n",
              "1                            195.0                    5                 4   \n",
              "2                            221.0                    3                 4   \n",
              "3                            184.0                    0                 4   \n",
              "4                            225.0                    6                 3   \n",
              "5                            212.0                    4                 4   \n",
              "8                            182.0                    3                 6   \n",
              "9                              NaN                    2                 3   \n",
              "11                           226.0                    1                 3   \n",
              "12                           195.0                    1                 3   \n",
              "\n",
              "          dire_ward_observer_count  dire_ward_sentry_count  \\\n",
              "match_id                                                     \n",
              "0                                2                       2   \n",
              "1                                3                       1   \n",
              "2                                3                       1   \n",
              "3                                2                       0   \n",
              "4                                3                       0   \n",
              "5                                4                       0   \n",
              "8                                3                       0   \n",
              "9                                4                       0   \n",
              "11                               4                       0   \n",
              "12                               2                       0   \n",
              "\n",
              "          dire_first_ward_time  \n",
              "match_id                        \n",
              "0                        -52.0  \n",
              "1                         -5.0  \n",
              "2                         13.0  \n",
              "3                         27.0  \n",
              "4                        -16.0  \n",
              "5                        -43.0  \n",
              "8                         10.0  \n",
              "9                        -15.0  \n",
              "11                        26.0  \n",
              "12                        16.0  \n",
              "\n",
              "[10 rows x 102 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6822db63-178e-4b2f-8083-9ce824847fa4\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>start_time</th>\n",
              "      <th>lobby_type</th>\n",
              "      <th>r1_hero</th>\n",
              "      <th>r1_level</th>\n",
              "      <th>r1_xp</th>\n",
              "      <th>r1_gold</th>\n",
              "      <th>r1_lh</th>\n",
              "      <th>r1_kills</th>\n",
              "      <th>r1_deaths</th>\n",
              "      <th>r1_items</th>\n",
              "      <th>...</th>\n",
              "      <th>radiant_ward_sentry_count</th>\n",
              "      <th>radiant_first_ward_time</th>\n",
              "      <th>dire_bottle_time</th>\n",
              "      <th>dire_courier_time</th>\n",
              "      <th>dire_flying_courier_time</th>\n",
              "      <th>dire_tpscroll_count</th>\n",
              "      <th>dire_boots_count</th>\n",
              "      <th>dire_ward_observer_count</th>\n",
              "      <th>dire_ward_sentry_count</th>\n",
              "      <th>dire_first_ward_time</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>match_id</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1430198770</td>\n",
              "      <td>7</td>\n",
              "      <td>11</td>\n",
              "      <td>5</td>\n",
              "      <td>2098</td>\n",
              "      <td>1489</td>\n",
              "      <td>20</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>35.0</td>\n",
              "      <td>103.0</td>\n",
              "      <td>-84.0</td>\n",
              "      <td>221.0</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>-52.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1430220345</td>\n",
              "      <td>0</td>\n",
              "      <td>42</td>\n",
              "      <td>4</td>\n",
              "      <td>1188</td>\n",
              "      <td>1033</td>\n",
              "      <td>9</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>12</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>-20.0</td>\n",
              "      <td>149.0</td>\n",
              "      <td>-84.0</td>\n",
              "      <td>195.0</td>\n",
              "      <td>5</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>-5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1430227081</td>\n",
              "      <td>7</td>\n",
              "      <td>33</td>\n",
              "      <td>4</td>\n",
              "      <td>1319</td>\n",
              "      <td>1270</td>\n",
              "      <td>22</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>12</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>-39.0</td>\n",
              "      <td>45.0</td>\n",
              "      <td>-77.0</td>\n",
              "      <td>221.0</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>13.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1430263531</td>\n",
              "      <td>1</td>\n",
              "      <td>29</td>\n",
              "      <td>4</td>\n",
              "      <td>1779</td>\n",
              "      <td>1056</td>\n",
              "      <td>14</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>-30.0</td>\n",
              "      <td>124.0</td>\n",
              "      <td>-80.0</td>\n",
              "      <td>184.0</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>27.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1430282290</td>\n",
              "      <td>7</td>\n",
              "      <td>13</td>\n",
              "      <td>4</td>\n",
              "      <td>1431</td>\n",
              "      <td>1090</td>\n",
              "      <td>8</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>8</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>46.0</td>\n",
              "      <td>182.0</td>\n",
              "      <td>-80.0</td>\n",
              "      <td>225.0</td>\n",
              "      <td>6</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>-16.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>1430284186</td>\n",
              "      <td>1</td>\n",
              "      <td>11</td>\n",
              "      <td>5</td>\n",
              "      <td>1961</td>\n",
              "      <td>1461</td>\n",
              "      <td>19</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>-27.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>-86.0</td>\n",
              "      <td>212.0</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>-43.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>1430293701</td>\n",
              "      <td>1</td>\n",
              "      <td>8</td>\n",
              "      <td>3</td>\n",
              "      <td>967</td>\n",
              "      <td>1136</td>\n",
              "      <td>7</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>8</td>\n",
              "      <td>...</td>\n",
              "      <td>2</td>\n",
              "      <td>-35.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>-86.0</td>\n",
              "      <td>182.0</td>\n",
              "      <td>3</td>\n",
              "      <td>6</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>10.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>1430299335</td>\n",
              "      <td>7</td>\n",
              "      <td>35</td>\n",
              "      <td>5</td>\n",
              "      <td>2117</td>\n",
              "      <td>1252</td>\n",
              "      <td>16</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>26.0</td>\n",
              "      <td>119.0</td>\n",
              "      <td>-61.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>-15.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>1430308974</td>\n",
              "      <td>1</td>\n",
              "      <td>17</td>\n",
              "      <td>5</td>\n",
              "      <td>1527</td>\n",
              "      <td>906</td>\n",
              "      <td>10</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>7</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>9.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-84.0</td>\n",
              "      <td>226.0</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>26.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>1430316105</td>\n",
              "      <td>7</td>\n",
              "      <td>15</td>\n",
              "      <td>5</td>\n",
              "      <td>1651</td>\n",
              "      <td>1060</td>\n",
              "      <td>14</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>10</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>-24.0</td>\n",
              "      <td>186.0</td>\n",
              "      <td>-83.0</td>\n",
              "      <td>195.0</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>16.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>10 rows × 102 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6822db63-178e-4b2f-8083-9ce824847fa4')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-6822db63-178e-4b2f-8083-9ce824847fa4 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-6822db63-178e-4b2f-8083-9ce824847fa4');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c3c70d5e-b9cb-4c5d-8154-f74c26370566\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c3c70d5e-b9cb-4c5d-8154-f74c26370566')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c3c70d5e-b9cb-4c5d-8154-f74c26370566 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 51
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "targets_train = features.iloc[:,103]\n",
        "print(targets_train.shape)\n",
        "targets_train.head(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VtaGJRbUev-u",
        "outputId": "3650ecbd-56f4-4d4f-e19f-60e25a1dcfba"
      },
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(97230,)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "match_id\n",
              "0     1\n",
              "1     1\n",
              "2     0\n",
              "3     0\n",
              "4     0\n",
              "5     0\n",
              "8     0\n",
              "9     1\n",
              "11    0\n",
              "12    0\n",
              "Name: radiant_win, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 52
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "features_train.count()[features_train.count() < 97230]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1zOrmvBDe9EQ",
        "outputId": "0c076316-003e-4a9d-f3e3-a72301e4344e"
      },
      "execution_count": 53,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "first_blood_time               77677\n",
              "first_blood_team               77677\n",
              "first_blood_player1            77677\n",
              "first_blood_player2            53243\n",
              "radiant_bottle_time            81539\n",
              "radiant_courier_time           96538\n",
              "radiant_flying_courier_time    69751\n",
              "radiant_first_ward_time        95394\n",
              "dire_bottle_time               81087\n",
              "dire_courier_time              96554\n",
              "dire_flying_courier_time       71132\n",
              "dire_first_ward_time           95404\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 53
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "features_train_filled = features_train.fillna(value = 0)\n",
        "print(features_train_filled.shape)\n",
        "features_train_filled.count()[features_train_filled.count() < 97230]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eascZkhUf2xR",
        "outputId": "7121e8b5-eabb-4357-c10b-2da46b9a9fc6"
      },
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(97230, 102)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Series([], dtype: int64)"
            ]
          },
          "metadata": {},
          "execution_count": 54
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.cross_validation import KFold\n",
        "from sklearn.cross_validation import cross_val_score\n",
        "\n",
        "kf = KFold(len(features_train_filled), n_folds=5, shuffle=True, random_state=16)"
      ],
      "metadata": {
        "id": "wSv6rqRwgMRv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.ensemble import GradientBoostingClassifier\n",
        "from sklearn.metrics import roc_auc_score\n",
        "import numpy as np\n",
        "import time\n",
        "import datetime\n",
        "\n",
        "scores = np.zeros(3)\n",
        "ix = 0\n",
        "\n",
        "for n_trees in [10, 20, 30] :\n",
        "\n",
        "    print(\"n_trees = \", n_trees)\n",
        "    clf = GradientBoostingClassifier(n_estimators = n_trees, verbose = True, random_state = 16, learning_rate = 0.1, max_depth = 3)\n",
        "\n",
        "    start_time = datetime.datetime.now()\n",
        "    cv_scores = cross_val_score(clf, features_train_filled, np.ravel(targets_train), cv = kf, scoring='roc_auc')\n",
        "    print ('Time elapsed:', datetime.datetime.now() - start_time)\n",
        "\n",
        "    scores[ix] = cv_scores.mean()\n",
        "    ix = ix + 1\n",
        "\n",
        "\n",
        "print(scores)"
      ],
      "metadata": {
        "id": "NEENj4uWl7Wt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "clf = GradientBoostingClassifier(n_estimators = 30, verbose = True, random_state = 16, learning_rate = 0.1, max_depth = 3)\n",
        "clf.fit(features_train_filled, np.ravel(targets_train))"
      ],
      "metadata": {
        "id": "5U8ZNl6Tlx8b"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "importances = np.transpose(np.array([np.ravel(features_train_filled.columns), clf.feature_importances_]))\n",
        "importances_df = pd.DataFrame(importances, columns = ('feature', 'importance'))\n",
        "importances_df_sorted = importances_df.sort_values(by = 'importance', ascending=False)\n",
        "print(importances_df_sorted.head(40))"
      ],
      "metadata": {
        "id": "J1peKUYPmINM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "features_test = pandas.read_csv('/content/features_test.csv', index_col='match_id')\n",
        "print(features_test.shape)\n",
        "features_test.head(10)"
      ],
      "metadata": {
        "id": "x_TSXWSYmKCl"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "features_test.count()[features_test.count() < 17177]"
      ],
      "metadata": {
        "id": "BkCOkqQEm1Il"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "features_test_filled = features_test.fillna(value = 0)\n",
        "print(features_test_filled.shape)\n",
        "features_test_filled.count()[features_test_filled.count() < 17177]"
      ],
      "metadata": {
        "id": "hulpmiynm3rR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "pred = clf.predict_proba(features_test_filled)[:, 1]\n",
        "print(pred.shape)"
      ],
      "metadata": {
        "id": "hX_1wkVfm6y-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "output = np.array([features_test_filled.index.values, pred])\n",
        "\n",
        "output = np.transpose(output)\n",
        "print(output.shape)\n",
        "np.savetxt('output.csv', output, fmt='%.10f', header = 'match_id, radiant_win', delimiter=',')\n"
      ],
      "metadata": {
        "id": "IBA_09UDm_Mf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Подход 2: логистическая регрессия\n",
        "\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "scaler = StandardScaler().fit(features_train_filled)\n",
        "features_train_filled_scaled = scaler.transform(features_train_filled)\n",
        "print(features_train_filled_scaled.shape)\n",
        "print(features_train_filled_scaled)"
      ],
      "metadata": {
        "id": "fQV8Wb8kqzJc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LogisticRegression\n",
        "\n",
        "scores_lr = np.zeros(5)\n",
        "ix = 0\n",
        "\n",
        "for C_reg in [10000, 100, 1, 0.01, 0.0001] :\n",
        "\n",
        "    print(\"C_reg = \", C_reg)\n",
        "    clf_lr = LogisticRegression(penalty='l2', C = C_reg, random_state = 16)\n",
        "\n",
        "    start_time = datetime.datetime.now()\n",
        "    cv_scores_lr = cross_val_score(clf_lr, features_train_filled_scaled, np.ravel(targets_train), cv = kf, scoring='roc_auc')\n",
        "    print ('Time elapsed:', datetime.datetime.now() - start_time)\n",
        "\n",
        "    scores_lr[ix] = cv_scores_lr.mean()\n",
        "    ix = ix + 1\n",
        "\n",
        "\n",
        "print(scores_lr)"
      ],
      "metadata": {
        "id": "VCV9CViwq4Su"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# проверим коэффициенты результирующей модели (=значения)\n",
        "\n",
        "clf_lr = LogisticRegression(penalty='l2', C = 0.01, random_state = 16)\n",
        "clf_lr.fit(features_train_filled_scaled, np.ravel(targets_train))\n",
        "\n",
        "print(np.shape(np.ravel(clf_lr.coef_)))\n",
        "print(np.shape(np.ravel([features_train_filled.columns])))\n",
        "\n",
        "coef_lr = np.transpose(np.array([np.ravel([features_train_filled.columns]), np.ravel(clf_lr.coef_)]))\n",
        "coef_lr_df = pd.DataFrame(coef_lr, columns = ('feature', 'coef')); coef_lr_df\n",
        "coef_lr_df_sorted = coef_lr_df.sort_values(by = 'coef', ascending=False)\n",
        "print(coef_lr_df_sorted.head(40))"
      ],
      "metadata": {
        "id": "ypeMtQACq6aN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# удалим категориальные переменные из features_train_filled\n",
        "\n",
        "features_train_filled_dropped = features_train_filled.drop(['lobby_type', 'r1_hero', 'r2_hero', 'r3_hero', 'r4_hero', 'r5_hero',\n",
        "                                                            'd1_hero', 'd2_hero', 'd3_hero', 'd4_hero', 'd5_hero'], axis = 1)\n",
        "print(features_train_filled_dropped.shape)\n",
        "\n",
        "scaler_dropped = StandardScaler().fit(features_train_filled_dropped)\n",
        "features_train_filled_dropped_scaled = scaler_dropped.transform(features_train_filled_dropped)\n",
        "print(features_train_filled_dropped_scaled.shape)\n",
        "print(features_train_filled_dropped_scaled)"
      ],
      "metadata": {
        "id": "1YAJvyljq8j0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "scores_lr_dropped = np.zeros(5)\n",
        "ix = 0\n",
        "\n",
        "for C_reg in [10000, 100, 1, 0.01, 0.0001] :\n",
        "\n",
        "    print(\"C_reg = \", C_reg)\n",
        "    clf_lr_dropped = LogisticRegression(penalty='l2', C = C_reg, random_state = 16)\n",
        "\n",
        "    start_time = datetime.datetime.now()\n",
        "    cv_scores_lr_dropped = cross_val_score(clf_lr_dropped, features_train_filled_dropped_scaled, np.ravel(targets_train), cv = kf, scoring='roc_auc')\n",
        "    print ('Time elapsed:', datetime.datetime.now() - start_time)\n",
        "\n",
        "    scores_lr_dropped[ix] = cv_scores_lr_dropped.mean()\n",
        "    ix = ix + 1\n",
        "\n",
        "\n",
        "print(scores_lr_dropped)"
      ],
      "metadata": {
        "id": "gVRl33cXq_Mu"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# подсчитаем уникальных героев для обоих противников\n",
        "\n",
        "features_train_filled.loc[:,('lobby_type', 'r1_hero', 'r2_hero', 'r3_hero', 'r4_hero', 'r5_hero',\n",
        "                                                            'd1_hero', 'd2_hero', 'd3_hero', 'd4_hero', 'd5_hero')].apply(pd.value_counts)\n"
      ],
      "metadata": {
        "id": "J1LOqsX8rCxM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# мешок слов\n",
        "# N — количество различных героев в выборке\n",
        "# на самом деле нет, различных 108, но они пронумерованы до 112, поэтому необходимо использовать N = 112\n",
        "\n",
        "N = 112\n",
        "X_pick = np.zeros((features_train_filled.shape[0], N))\n",
        "\n",
        "for i, match_id in enumerate(features_train_filled.index):\n",
        "    for p in range(5):\n",
        "        X_pick[i, features_train_filled.ix[match_id, 'r%d_hero' % (p+1)]-1] = 1\n",
        "        X_pick[i, features_train_filled.ix[match_id, 'd%d_hero' % (p+1)]-1] = -1\n",
        "\n",
        "print(X_pick.shape)\n",
        "print(X_pick[0,:])"
      ],
      "metadata": {
        "id": "DM5vAdCPrI3j"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# добавим X_pick в features_train_filled_dropped\n",
        "\n",
        "X_pick_indexed = pd.DataFrame(X_pick, index = features_train_filled_dropped.index)\n",
        "features_train_filled_ext = pd.concat([features_train_filled_dropped, X_pick_indexed], axis = 1, join_axes=[features_train_filled_dropped.index])\n",
        "\n",
        "print(features_train_filled_ext.shape)\n",
        "features_train_filled_ext"
      ],
      "metadata": {
        "id": "96CFHkzcrL8s"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# масштабируем features_train_filled_ext\n",
        "\n",
        "scaler_ext = StandardScaler().fit(features_train_filled_ext)\n",
        "features_train_filled_ext_scaled = scaler_ext.transform(features_train_filled_ext)\n",
        "print(features_train_filled_ext_scaled.shape)\n",
        "print(features_train_filled_ext_scaled)"
      ],
      "metadata": {
        "id": "cg5VdfoArOnv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "scores_lr_ext = np.zeros(5)\n",
        "ix = 0\n",
        "\n",
        "for C_reg in [10000, 100, 1, 0.01, 0.0001] :\n",
        "\n",
        "    print(\"C_reg = \", C_reg)\n",
        "    clf_lr_ext = LogisticRegression(penalty='l2', C = C_reg, random_state = 16)\n",
        "\n",
        "    start_time = datetime.datetime.now()\n",
        "    cv_scores_lr_ext = cross_val_score(clf_lr, features_train_filled_ext_scaled, np.ravel(targets_train), cv = kf, scoring='roc_auc')\n",
        "    print ('Time elapsed:', datetime.datetime.now() - start_time)\n",
        "\n",
        "    scores_lr_ext[ix] = cv_scores_lr_ext.mean()\n",
        "    ix = ix + 1\n",
        "\n",
        "\n",
        "print(scores_lr_ext)"
      ],
      "metadata": {
        "id": "8bAjQi0irRHM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# проверьте коэффициенты результирующей модели (=значения)\n",
        "\n",
        "clf_lr_ext = LogisticRegression(penalty='l2', C = 0.01, random_state = 16)\n",
        "clf_lr_ext.fit(features_train_filled_ext_scaled, np.ravel(targets_train))\n",
        "\n",
        "print(np.shape(np.ravel(clf_lr_ext.coef_)))\n",
        "print(np.shape(np.ravel([features_train_filled_ext.columns])))\n",
        "\n",
        "coef_lr_ext = np.transpose(np.array([np.ravel([features_train_filled_ext.columns]), np.ravel(clf_lr_ext.coef_)]))\n",
        "coef_lr_ext_df = pd.DataFrame(coef_lr_ext, columns = ('feature', 'coef')); coef_lr_ext_df\n",
        "coef_lr_ext_df_sorted = coef_lr_ext_df.sort_values(by = 'coef', ascending=False)\n",
        "print(coef_lr_ext_df_sorted.head(40))"
      ],
      "metadata": {
        "id": "9xZCkZANrTrV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# нам нужно удалить категориальные значения, добавить функции \"мешок слов\" и масштабировать\n",
        "\n",
        "# отбросим категориальные переменные\n",
        "\n",
        "features_test_filled_dropped = features_test_filled.drop(['lobby_type', 'r1_hero', 'r2_hero', 'r3_hero', 'r4_hero', 'r5_hero',\n",
        "                                                            'd1_hero', 'd2_hero', 'd3_hero', 'd4_hero', 'd5_hero'], axis = 1)\n",
        "print('features_test_filled_dropped.shape = ', features_test_filled_dropped.shape)\n",
        "\n",
        "# добавим \"мешок слов\" функции вместо этого\n",
        "\n",
        "N = 112\n",
        "X_pick_test = np.zeros((features_test_filled.shape[0], N))\n",
        "\n",
        "for i, match_id in enumerate(features_test_filled.index):\n",
        "    for p in range(5):\n",
        "        X_pick_test[i, features_test_filled.ix[match_id, 'r%d_hero' % (p+1)]-1] = 1\n",
        "        X_pick_test[i, features_test_filled.ix[match_id, 'd%d_hero' % (p+1)]-1] = -1\n",
        "\n",
        "print('X_pick_test.shape = ', X_pick_test.shape)\n",
        "print('X_pick_test[0,:] = ', X_pick_test[0,:])\n",
        "\n",
        "X_pick_test_indexed = pd.DataFrame(X_pick_test, index = features_test_filled_dropped.index)\n",
        "features_test_filled_ext = pd.concat([features_test_filled_dropped, X_pick_test_indexed], axis = 1, join_axes=[features_test_filled_dropped.index])\n",
        "\n",
        "print('features_test_filled_ext.shape = ', features_test_filled_ext.shape)\n",
        "print('features_test_filled_ext = ', features_test_filled_ext)\n",
        "\n",
        "# масштабируем\n",
        "\n",
        "features_test_filled_ext_scaled = scaler_ext.transform(features_test_filled_ext)\n",
        "print('features_test_filled_ext_scaled.shape = ', features_test_filled_ext_scaled.shape)\n",
        "print('features_test_filled_ext_scaled = ', features_test_filled_ext_scaled)"
      ],
      "metadata": {
        "id": "_KwMhMmurXN3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# делаем прогнозы для тестовых данных\n",
        "\n",
        "pred_lr = clf_lr_ext.predict_proba(features_test_filled_ext_scaled)[:, 1]\n",
        "print(pred_lr.shape)\n",
        "pred_lr\n",
        "\n",
        "output_lr = np.array([features_test_filled_ext.index.values, pred_lr])\n",
        "\n",
        "output_lr = np.transpose(output_lr)\n",
        "print(output_lr.shape)\n",
        "np.savetxt('output_lr_2.csv', output_lr, fmt='%.10f', header = 'match_id, radiant_win', delimiter=',')\n"
      ],
      "metadata": {
        "id": "nDlGR1ijrbGD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# используем повышение градиента для features_test_filled_ext\n",
        "scores_gb_1 = np.zeros(3)\n",
        "ix = 0\n",
        "\n",
        "for n_trees in [30] :\n",
        "\n",
        "    print(\"n_trees = \", n_trees)\n",
        "    clf_gb_1 = GradientBoostingClassifier(n_estimators = n_trees, verbose = True, random_state = 16, learning_rate = 0.1, max_depth = 3)\n",
        "\n",
        "    start_time = datetime.datetime.now()\n",
        "    cv_scores_gb_1 = cross_val_score(clf_gb_1, features_train_filled_ext, np.ravel(targets_train), cv = kf, scoring='roc_auc')\n",
        "    print ('Time elapsed:', datetime.datetime.now() - start_time)\n",
        "\n",
        "    scores_gb_1[ix] = cv_scores_gb_1.mean()\n",
        "    ix = ix + 1\n",
        "\n",
        "\n",
        "print(scores_gb_1)"
      ],
      "metadata": {
        "id": "8k7dzgMird6d"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# подведем итог особенностям героев в каждой команде\n",
        "\n",
        "X_agg = pd.DataFrame(index = features_train_filled_ext.index)\n",
        "\n",
        "X_agg['r_level'] = np.zeros(features_train_filled_ext.shape[0])\n",
        "X_agg['r_xp'] = np.zeros(features_train_filled_ext.shape[0])\n",
        "X_agg['r_gold'] = np.zeros(features_train_filled_ext.shape[0])\n",
        "X_agg['r_lh'] = np.zeros(features_train_filled_ext.shape[0])\n",
        "X_agg['r_kills'] = np.zeros(features_train_filled_ext.shape[0])\n",
        "X_agg['r_deaths'] = np.zeros(features_train_filled_ext.shape[0])\n",
        "X_agg['r_items'] = np.zeros(features_train_filled_ext.shape[0])\n",
        "X_agg['d_level'] = np.zeros(features_train_filled_ext.shape[0])\n",
        "X_agg['d_xp'] = np.zeros(features_train_filled_ext.shape[0])\n",
        "X_agg['d_gold'] = np.zeros(features_train_filled_ext.shape[0])\n",
        "X_agg['d_lh'] = np.zeros(features_train_filled_ext.shape[0])\n",
        "X_agg['d_kills'] = np.zeros(features_train_filled_ext.shape[0])\n",
        "X_agg['d_deaths'] = np.zeros(features_train_filled_ext.shape[0])\n",
        "X_agg['d_items'] = np.zeros(features_train_filled_ext.shape[0])\n",
        "\n",
        "\n",
        "for p in range(5):\n",
        "    X_agg['r_level'] = X_agg['r_level'] + features_train_filled.ix[:, 'r%d_level' % (p+1)]\n",
        "    X_agg['r_xp'] = X_agg['r_xp'] + features_train_filled.ix[:, 'r%d_xp' % (p+1)]\n",
        "    X_agg['r_gold'] = X_agg['r_gold'] + features_train_filled.ix[:, 'r%d_gold' % (p+1)]\n",
        "    X_agg['r_lh'] = X_agg['r_lh'] + features_train_filled.ix[:, 'r%d_lh' % (p+1)]\n",
        "    X_agg['r_kills'] = X_agg['r_kills'] + features_train_filled.ix[:, 'r%d_kills' % (p+1)]\n",
        "    X_agg['r_deaths'] = X_agg['r_deaths'] + features_train_filled.ix[:, 'r%d_deaths' % (p+1)]\n",
        "    X_agg['r_items'] = X_agg['r_items'] + features_train_filled.ix[:, 'r%d_items' % (p+1)]\n",
        "    X_agg['d_level'] = X_agg['d_level'] + features_train_filled.ix[:, 'd%d_level' % (p+1)]\n",
        "    X_agg['d_xp'] = X_agg['d_xp'] + features_train_filled.ix[:, 'd%d_xp' % (p+1)]\n",
        "    X_agg['d_gold'] = X_agg['d_gold'] + features_train_filled.ix[:, 'd%d_gold' % (p+1)]\n",
        "    X_agg['d_lh'] = X_agg['d_lh'] + features_train_filled.ix[:, 'd%d_lh' % (p+1)]\n",
        "    X_agg['d_kills'] = X_agg['d_kills'] + features_train_filled.ix[:, 'd%d_kills' % (p+1)]\n",
        "    X_agg['d_deaths'] = X_agg['d_deaths'] + features_train_filled.ix[:, 'd%d_deaths' % (p+1)]\n",
        "    X_agg['d_items'] = X_agg['d_items'] + features_train_filled.ix[:, 'd%d_items' % (p+1)]\n",
        "\n",
        "\n",
        "print(X_agg['r_level'])\n",
        "print(features_train_filled.ix[:, 'r%d_level' % (p+1)])"
      ],
      "metadata": {
        "id": "7wR-bGtBrhAh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# удалим соответствующие переменные \"для каждого героя\"\n",
        "# добавим переменные \"для каждой команды\"\n",
        "\n",
        "print(features_train_filled_ext.shape)\n",
        "features_train_filled_ext_agg = features_train_filled_ext\n",
        "\n",
        "for p in range(5):\n",
        "    features_train_filled_ext_agg = features_train_filled_ext_agg.drop(['r%d_level' % (p+1)], axis = 1)\n",
        "    features_train_filled_ext_agg = features_train_filled_ext_agg.drop(['r%d_xp' % (p+1)], axis = 1)\n",
        "    features_train_filled_ext_agg = features_train_filled_ext_agg.drop(['r%d_gold' % (p+1)], axis = 1)\n",
        "    features_train_filled_ext_agg = features_train_filled_ext_agg.drop(['r%d_lh' % (p+1)], axis = 1)\n",
        "    features_train_filled_ext_agg = features_train_filled_ext_agg.drop(['r%d_kills' % (p+1)], axis = 1)\n",
        "    features_train_filled_ext_agg = features_train_filled_ext_agg.drop(['r%d_deaths' % (p+1)], axis = 1)\n",
        "    features_train_filled_ext_agg = features_train_filled_ext_agg.drop(['r%d_items' % (p+1)], axis = 1)\n",
        "    features_train_filled_ext_agg = features_train_filled_ext_agg.drop(['d%d_level' % (p+1)], axis = 1)\n",
        "    features_train_filled_ext_agg = features_train_filled_ext_agg.drop(['d%d_xp' % (p+1)], axis = 1)\n",
        "    features_train_filled_ext_agg = features_train_filled_ext_agg.drop(['d%d_gold' % (p+1)], axis = 1)\n",
        "    features_train_filled_ext_agg = features_train_filled_ext_agg.drop(['d%d_lh' % (p+1)], axis = 1)\n",
        "    features_train_filled_ext_agg = features_train_filled_ext_agg.drop(['d%d_kills' % (p+1)], axis = 1)\n",
        "    features_train_filled_ext_agg = features_train_filled_ext_agg.drop(['d%d_deaths' % (p+1)], axis = 1)\n",
        "    features_train_filled_ext_agg = features_train_filled_ext_agg.drop(['d%d_items' % (p+1)], axis = 1)\n",
        "\n",
        "print(features_train_filled_ext_agg.shape)\n",
        "\n",
        "# добавление переменных из X_agg_test\n",
        "\n",
        "X_agg_indexed = pd.DataFrame(X_agg, index = features_train_filled_ext_agg.index)\n",
        "features_train_filled_ext_agg = pd.concat([features_train_filled_ext_agg, X_agg_indexed], axis = 1, join_axes=[features_train_filled_ext_agg.index])\n",
        "\n",
        "print('features_train_filled_ext_agg.shape = ', features_train_filled_ext_agg.shape)\n",
        "\n",
        "#масштаб\n",
        "\n",
        "scaler_agg = StandardScaler().fit(features_train_filled_ext_agg)\n",
        "features_train_filled_ext_agg_scaled = scaler_agg.transform(features_train_filled_ext_agg)\n",
        "print(features_train_filled_ext_agg_scaled.shape)\n",
        "print(features_train_filled_ext_agg_scaled)"
      ],
      "metadata": {
        "id": "qhdeSA1kriZu"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# обучение модели\n",
        "\n",
        "scores_lr_agg = np.zeros(8)\n",
        "ix = 0\n",
        "\n",
        "for C_reg in [10000, 100, 1, 0.01, 0.005, 0.001, 0.0005, 0.0001] :\n",
        "\n",
        "    print(\"C_reg = \", C_reg)\n",
        "    clf_lr_agg = LogisticRegression(penalty='l2', C = C_reg, random_state = 16)\n",
        "\n",
        "    start_time = datetime.datetime.now()\n",
        "    cv_scores_lr_agg = cross_val_score(clf_lr_agg, features_train_filled_ext_agg_scaled, np.ravel(targets_train), cv = kf, scoring='roc_auc')\n",
        "    print ('Time elapsed:', datetime.datetime.now() - start_time)\n",
        "\n",
        "    scores_lr_agg[ix] = cv_scores_lr_agg.mean()\n",
        "    ix = ix + 1\n",
        "\n",
        "\n",
        "print(scores_lr_agg)"
      ],
      "metadata": {
        "id": "pMQdFBLcrmLe"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# проверим коэффициенты результирующей модели (=значения)\n",
        "\n",
        "clf_lr_agg = LogisticRegression(penalty='l2', C = 0.01, random_state = 16)\n",
        "clf_lr_agg.fit(features_train_filled_ext_agg_scaled, np.ravel(targets_train))\n",
        "\n",
        "print(np.shape(np.ravel(clf_lr_agg.coef_)))\n",
        "print(np.shape(np.ravel([features_train_filled_ext_agg.columns])))\n",
        "\n",
        "coef_lr_agg = np.transpose(np.array([np.ravel([features_train_filled_ext_agg.columns]), np.ravel(clf_lr_agg.coef_)]))\n",
        "coef_lr_agg_df = pd.DataFrame(coef_lr_agg, columns = ('feature', 'coef')); coef_lr_ext_df\n",
        "coef_lr_agg_df_sorted = coef_lr_agg_df.sort_values(by = 'coef', ascending=False)\n",
        "print(coef_lr_agg_df_sorted.head(40))"
      ],
      "metadata": {
        "id": "vcW6T5J7roJM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# просуммируем характеристики героев для каждой команды - для получения тестовых данных\n",
        "X_agg_test = pd.DataFrame(index = features_test_filled_ext.index)\n",
        "\n",
        "X_agg_test['r_level'] = np.zeros(features_test_filled_ext.shape[0])\n",
        "X_agg_test['r_xp'] = np.zeros(features_test_filled_ext.shape[0])\n",
        "X_agg_test['r_gold'] = np.zeros(features_test_filled_ext.shape[0])\n",
        "X_agg_test['r_lh'] = np.zeros(features_test_filled_ext.shape[0])\n",
        "X_agg_test['r_kills'] = np.zeros(features_test_filled_ext.shape[0])\n",
        "X_agg_test['r_deaths'] = np.zeros(features_test_filled_ext.shape[0])\n",
        "X_agg_test['r_items'] = np.zeros(features_test_filled_ext.shape[0])\n",
        "X_agg_test['d_level'] = np.zeros(features_test_filled_ext.shape[0])\n",
        "X_agg_test['d_xp'] = np.zeros(features_test_filled_ext.shape[0])\n",
        "X_agg_test['d_gold'] = np.zeros(features_test_filled_ext.shape[0])\n",
        "X_agg_test['d_lh'] = np.zeros(features_test_filled_ext.shape[0])\n",
        "X_agg_test['d_kills'] = np.zeros(features_test_filled_ext.shape[0])\n",
        "X_agg_test['d_deaths'] = np.zeros(features_test_filled_ext.shape[0])\n",
        "X_agg_test['d_items'] = np.zeros(features_test_filled_ext.shape[0])\n",
        "\n",
        "\n",
        "for p in range(5):\n",
        "    X_agg_test['r_level'] = X_agg_test['r_level'] + features_test_filled_ext.ix[:, 'r%d_level' % (p+1)]\n",
        "    X_agg_test['r_xp'] = X_agg_test['r_xp'] + features_test_filled_ext.ix[:, 'r%d_xp' % (p+1)]\n",
        "    X_agg_test['r_gold'] = X_agg_test['r_gold'] + features_test_filled_ext.ix[:, 'r%d_gold' % (p+1)]\n",
        "    X_agg_test['r_lh'] = X_agg_test['r_lh'] + features_test_filled_ext.ix[:, 'r%d_lh' % (p+1)]\n",
        "    X_agg_test['r_kills'] = X_agg_test['r_kills'] + features_test_filled_ext.ix[:, 'r%d_kills' % (p+1)]\n",
        "    X_agg_test['r_deaths'] = X_agg_test['r_deaths'] + features_test_filled_ext.ix[:, 'r%d_deaths' % (p+1)]\n",
        "    X_agg_test['r_items'] = X_agg_test['r_items'] + features_test_filled_ext.ix[:, 'r%d_items' % (p+1)]\n",
        "    X_agg_test['d_level'] = X_agg_test['d_level'] + features_test_filled_ext.ix[:, 'd%d_level' % (p+1)]\n",
        "    X_agg_test['d_xp'] = X_agg_test['d_xp'] + features_test_filled_ext.ix[:, 'd%d_xp' % (p+1)]\n",
        "    X_agg_test['d_gold'] = X_agg_test['d_gold'] + features_test_filled_ext.ix[:, 'd%d_gold' % (p+1)]\n",
        "    X_agg_test['d_lh'] = X_agg_test['d_lh'] + features_test_filled_ext.ix[:, 'd%d_lh' % (p+1)]\n",
        "    X_agg_test['d_kills'] = X_agg_test['d_kills'] + features_test_filled_ext.ix[:, 'd%d_kills' % (p+1)]\n",
        "    X_agg_test['d_deaths'] = X_agg_test['d_deaths'] + features_test_filled_ext.ix[:, 'd%d_deaths' % (p+1)]\n",
        "    X_agg_test['d_items'] = X_agg_test['d_items'] + features_test_filled_ext.ix[:, 'd%d_items' % (p+1)]\n",
        "\n",
        "\n",
        "print(features_test_filled_ext.shape)\n",
        "features_test_filled_ext_agg = features_test_filled_ext\n",
        "\n",
        "for p in range(5):\n",
        "    features_test_filled_ext_agg = features_test_filled_ext_agg.drop(['r%d_level' % (p+1)], axis = 1)\n",
        "    features_test_filled_ext_agg = features_test_filled_ext_agg.drop(['r%d_xp' % (p+1)], axis = 1)\n",
        "    features_test_filled_ext_agg = features_test_filled_ext_agg.drop(['r%d_gold' % (p+1)], axis = 1)\n",
        "    features_test_filled_ext_agg = features_test_filled_ext_agg.drop(['r%d_lh' % (p+1)], axis = 1)\n",
        "    features_test_filled_ext_agg = features_test_filled_ext_agg.drop(['r%d_kills' % (p+1)], axis = 1)\n",
        "    features_test_filled_ext_agg = features_test_filled_ext_agg.drop(['r%d_deaths' % (p+1)], axis = 1)\n",
        "    features_test_filled_ext_agg = features_test_filled_ext_agg.drop(['r%d_items' % (p+1)], axis = 1)\n",
        "    features_test_filled_ext_agg = features_test_filled_ext_agg.drop(['d%d_level' % (p+1)], axis = 1)\n",
        "    features_test_filled_ext_agg = features_test_filled_ext_agg.drop(['d%d_xp' % (p+1)], axis = 1)\n",
        "    features_test_filled_ext_agg = features_test_filled_ext_agg.drop(['d%d_gold' % (p+1)], axis = 1)\n",
        "    features_test_filled_ext_agg = features_test_filled_ext_agg.drop(['d%d_lh' % (p+1)], axis = 1)\n",
        "    features_test_filled_ext_agg = features_test_filled_ext_agg.drop(['d%d_kills' % (p+1)], axis = 1)\n",
        "    features_test_filled_ext_agg = features_test_filled_ext_agg.drop(['d%d_deaths' % (p+1)], axis = 1)\n",
        "    features_test_filled_ext_agg = features_test_filled_ext_agg.drop(['d%d_items' % (p+1)], axis = 1)\n",
        "\n",
        "print(features_test_filled_ext_agg.shape)\n",
        "\n",
        "#добавление переменных из X_agg_test\n",
        "\n",
        "X_agg_test_indexed = pd.DataFrame(X_agg_test, index = features_test_filled_ext_agg.index)\n",
        "features_test_filled_ext_agg = pd.concat([features_test_filled_ext_agg, X_agg_test_indexed], axis = 1, join_axes=[features_test_filled_ext_agg.index])\n",
        "\n",
        "print('features_test_filled_ext_agg.shape = ', features_test_filled_ext_agg.shape)\n",
        "\n",
        "#масштаб\n",
        "\n",
        "features_test_filled_ext_agg_scaled = scaler_agg.transform(features_test_filled_ext_agg)\n",
        "print(features_test_filled_ext_agg_scaled.shape)\n",
        "print(features_test_filled_ext_agg_scaled)"
      ],
      "metadata": {
        "id": "4FUF6OW0rsBu"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "pred_lr_agg = clf_lr_agg.predict_proba(features_test_filled_ext_agg_scaled)[:, 1]\n",
        "print(pred_lr_agg.shape)\n",
        "pred_lr_agg\n",
        "\n",
        "#создание выходного массива и запись его в файл\n",
        "output_lr_agg = np.array([features_test_filled_ext_agg.index.values, pred_lr_agg])\n",
        "\n",
        "output_lr_agg = np.transpose(output_lr_agg)\n",
        "print(output_lr_agg.shape)\n",
        "np.savetxt('output_lr_agg_1.csv', output_lr_agg, fmt='%.10f', header = 'match_id, radiant_win', delimiter=',')\n"
      ],
      "metadata": {
        "id": "Syw0LbIVrvLw"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
